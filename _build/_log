### Starting build.
# Target: gui.mli.depends, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), debug, extension:mli, file:gui.mli, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -modules gui.mli > gui.mli.depends
# Target: gui.cmi, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), byte, compile, debug, extension:mli, file:gui.mli, interf, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -o gui.cmi gui.mli
# Target: gui.ml.depends, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), debug, extension:ml, file:gui.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -modules gui.ml > gui.ml.depends
# Target: cipher.mli.depends, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), debug, extension:mli, file:cipher.mli, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -modules cipher.mli > cipher.mli.depends
# Target: customize.mli.depends, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), debug, extension:mli, file:customize.mli, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -modules customize.mli > customize.mli.depends
# Target: file.mli.depends, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), debug, extension:mli, file:file.mli, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -modules file.mli > file.mli.depends
# Target: markdown.mli.depends, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), debug, extension:mli, file:markdown.mli, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -modules markdown.mli > markdown.mli.depends
# Target: regex.mli.depends, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), debug, extension:mli, file:regex.mli, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -modules regex.mli > regex.mli.depends # cached
# Target: regex.cmi, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), byte, compile, debug, extension:mli, file:regex.mli, interf, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -o regex.cmi regex.mli # cached
# Target: state.mli.depends, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), debug, extension:mli, file:state.mli, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -modules state.mli > state.mli.depends
# Target: words.mli.depends, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), debug, extension:mli, file:words.mli, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -modules words.mli > words.mli.depends
# Target: cipher.cmi, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), byte, compile, debug, extension:mli, file:cipher.mli, interf, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -o cipher.cmi cipher.mli
# Target: customize.cmi, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), byte, compile, debug, extension:mli, file:customize.mli, interf, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -o customize.cmi customize.mli
# Target: file.cmi, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), byte, compile, debug, extension:mli, file:file.mli, interf, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -o file.cmi file.mli
# Target: markdown.cmi, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), byte, compile, debug, extension:mli, file:markdown.mli, interf, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -o markdown.cmi markdown.mli
# Target: state.cmi, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), byte, compile, debug, extension:mli, file:state.mli, interf, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -o state.cmi state.mli
# Target: words.cmi, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), byte, compile, debug, extension:mli, file:words.mli, interf, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -o words.cmi words.mli
# Target: gui.cmo, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), byte, compile, debug, extension:cmo, extension:ml, file:gui.cmo, file:gui.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -o gui.cmo gui.ml
# Target: cipher.ml.depends, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), debug, extension:ml, file:cipher.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -modules cipher.ml > cipher.ml.depends # cached
# Target: customize.ml.depends, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), debug, extension:ml, file:customize.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -modules customize.ml > customize.ml.depends # cached
# Target: file.ml.depends, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), debug, extension:ml, file:file.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -modules file.ml > file.ml.depends # cached
# Target: markdown.ml.depends, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), debug, extension:ml, file:markdown.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -modules markdown.ml > markdown.ml.depends # cached
# Target: regex.ml.depends, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), debug, extension:ml, file:regex.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -modules regex.ml > regex.ml.depends # cached
# Target: regex.cmo, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), byte, compile, debug, extension:cmo, extension:ml, file:regex.cmo, file:regex.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -o regex.cmo regex.ml # cached
# Target: state.ml.depends, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), debug, extension:ml, file:state.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -modules state.ml > state.ml.depends # cached
# Target: words.ml.depends, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), debug, extension:ml, file:words.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -modules words.ml > words.ml.depends # cached
# Target: cipher.cmo, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), byte, compile, debug, extension:cmo, extension:ml, file:cipher.cmo, file:cipher.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -o cipher.cmo cipher.ml
# Target: customize.cmo, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), byte, compile, debug, extension:cmo, extension:ml, file:customize.cmo, file:customize.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -o customize.cmo customize.ml
# Target: file.cmo, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), byte, compile, debug, extension:cmo, extension:ml, file:file.cmo, file:file.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -o file.cmo file.ml
# Target: markdown.cmo, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), byte, compile, debug, extension:cmo, extension:ml, file:markdown.cmo, file:markdown.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -o markdown.cmo markdown.ml
# Target: state.cmo, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), byte, compile, debug, extension:cmo, extension:ml, file:state.cmo, file:state.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -o state.cmo state.ml
# Target: words.cmo, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), byte, compile, debug, extension:cmo, extension:ml, file:words.cmo, file:words.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str -o words.cmo words.ml
# Target: gui.byte, tags: { package(core), package(lablgtk2), package(lambdasoup), package(ounit2), package(qcheck), package(str), package(yojson), byte, debug, dont_link_with, extension:byte, file:gui.byte, link, ocaml, program, quiet, thread, traverse }
ocamlfind ocamlc -linkpkg -g -thread -package ounit2 -package core -package lablgtk2 -package yojson -package qcheck -package lambdasoup -package str cipher.cmo customize.cmo file.cmo markdown.cmo regex.cmo state.cmo words.cmo gui.cmo -o gui.byte
# Compilation successful.
